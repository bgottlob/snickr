<h1><%= @workspace.name %></h1>
<p><%= @workspace.description %></p>

<%= if Snickr.Accounts.admin?(@current_user, @workspace) do %>
  <h2>Invite Someone to <%= @workspace.name %></h2>
  <div>
    <input id="invite-user" placeholder="Invite a user">
  </div>
  <ul id="invite-search"></ul>

  <h2>Make Someone Admin to <%= @workspace.name %></h2>
  <div>
    <input id="invite-admin" placeholder="Invite a user">
  </div>
  <ul id="inviteAdmin-search"></ul>
<% end %>

<h2>Your Channels</h2>
<ul>
  <%= for c <- Enum.sort(@channels, &sort_channels/2) do %>
    <li>
      <%= if c.type == "direct" do %>
        <%= link direct_recipient(c, @current_user), to: Routes.channel_path(@conn, :show, c.id) %>
      <% else %>
        <%= link c.name, to: Routes.channel_path(@conn, :show, c.id) %>
      <% end %>
      <span style="font-size: 0.8em"><em><%= c.type %></em></span>
    </li>
  <% end %>
</ul>

<%= link "Create a Channel", to: Routes.channel_path(@conn, :new, workspace_id: @workspace.id) %>

<br>
<br>

<h2>Start a Direct Message</h2>
<div>
  <input id="direct-message" placeholder="Find a user">
</div>
<ul id="search-results"></ul>

<h2>Public Channels</h2>
<ul>
<%= for c <- @public_channels do %>
  <li>
    <%= c.name %>
    <%= if Snickr.Accounts.subscriber?(@current_user, c) do %>
      <button disabled="true">Subscribed</button>
    <% else %>
      <%= form_for Snickr.Accounts.Subscription.changeset(%Snickr.Accounts.Subscription{}, %{}), Routes.subscription_path(@conn, :create), [as: :subscription, style: "display:inline"], fn f -> %>
        <%= hidden_input f, :channel_id, value: c.id %>
        <%= submit "Subscribe" %>
      <% end %>
    <% end %>
  </li>
<% end %>
</ul>

<script>
  const CSRF_TOKEN = <%= raw Poison.encode!(Plug.CSRFProtection.get_csrf_token()) %>
  const workspace_id = Number(/workspaces\/(\d+)$/.exec(window.location.href)[1])

  var dmInput = document.querySelector('#direct-message')
  var searchResultsElement = document.querySelector('#search-results')
  var inviteUser = document.querySelector('#invite-user')
  var inviteSearch = document.querySelector('#invite-search')

  var inviteAdmin = document.querySelector('#invite-admin')
  var inviteAdminSearch = document.querySelector('#inviteAdmin-search')

  inviteAdmin.addEventListener('keyup', function(event) {
    // Clear the list of results
    inviteAdminSearch.innerHTML = ''
    
    if (event.currentTarget.value.length > 2) {
      inviteAdminSearch.innerHTML = 'LOADING...'
      var req2 = new XMLHttpRequest()
      req2.open("POST", "/users/invite", true)
      req2.setRequestHeader('Content-Type', 'application/json')
      req2.setRequestHeader('X-CSRF-Token', CSRF_TOKEN)
      req2.send(JSON.stringify({
        term: event.currentTarget.value,
        workspace_id: workspace_id
      }))

      req2.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            inviteAdminSearch.innerHTML = ''
            JSON.parse(this.responseText).forEach(function(result) {
              renderInviteAdminSearchResult(inviteAdminSearch, result)
            })
          } else {
            inviteAdminSearch.innerHTML = 'FAILED'
          }
        }
      }
    }
  })


  inviteUser.addEventListener('keyup', function(event) {
    // Clear the list of results
    inviteSearch.innerHTML = ''
    
    if (event.currentTarget.value.length > 2) {
      inviteSearch.innerHTML = 'LOADING...'
      var req2 = new XMLHttpRequest()
      req2.open("POST", "/users/invite", true)
      req2.setRequestHeader('Content-Type', 'application/json')
      req2.setRequestHeader('X-CSRF-Token', CSRF_TOKEN)
      req2.send(JSON.stringify({
        term: event.currentTarget.value,
        workspace_id: workspace_id
      }))

      req2.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            inviteSearch.innerHTML = ''
            JSON.parse(this.responseText).forEach(function(result) {
              renderInviteSearchResult(inviteSearch, result)
            })
          } else {
            inviteSearch.innerHTML = 'FAILED'
          }
        }
      }
    }
  })


  dmInput.addEventListener('keyup', function(event) {
    // Clear the list of results
    searchResultsElement.innerHTML = ''
    
    if (event.currentTarget.value.length > 2) {
      searchResultsElement.innerHTML = 'LOADING...'
      var req = new XMLHttpRequest()
      req.open("POST", "/users/search", true)
      req.setRequestHeader('Content-Type', 'application/json')
      req.setRequestHeader('X-CSRF-Token', CSRF_TOKEN)
      req.send(JSON.stringify({
        term: event.currentTarget.value,
        workspace_id: workspace_id
      }))

      req.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            searchResultsElement.innerHTML = ''
            JSON.parse(this.responseText).forEach(function(result) {
              renderSearchResult(searchResultsElement, result)
            })
          } 
          else {
            searchResultsElement.innerHTML = 'FAILED'
          }
        }
      }
    }
  })


  // Escapes untrusted strings
  function esc(str) {
    let div = document.createElement('div')
    div.appendChild(document.createTextNode(str))
    return div.innerHTML
  }

  function renderInviteAdminSearchResult(container, result) {
    let template = document.createElement('div')
    template.innerHTML = `
      ${esc(result.username)}: ${esc(result.full_name)}
      <%= form_for Snickr.Accounts.AdminInvitation.changeset(%Snickr.Accounts.AdminInvitation{}, %{}), Routes.invite_path(@conn, :create_admin), [as: :invite], fn f -> %>
        <%= hidden_input f, :status, value: "pending" %>
        <%= hidden_input f, :user_id %>
        <%= hidden_input f, :workspace_id, value: @workspace.id %>
        <%= submit "Send Invite" %>
      <% end %>
    `
    template.querySelector('#invite_user_id').setAttribute('value', result.id)
    container.appendChild(template)
  }

  function renderInviteSearchResult(container, result) {
    let template = document.createElement('div')
    // The changeset I'm creating and passing in isn't used, it's just needed by the form_for method to run properly - if we implemented more robust error handling, we could use a changeset there. [as: :invite] collects all of the attributes of the form into an "invites" map, which the create action in your controller looks for
    template.innerHTML = `
      ${esc(result.username)}: ${esc(result.full_name)}
      <%= form_for Snickr.Accounts.MembershipInvitation.changeset(%Snickr.Accounts.MembershipInvitation{}, %{}), Routes.invite_path(@conn, :create), [as: :invite], fn f -> %>
        <%= hidden_input f, :status, value: "pending" %>
        <%= hidden_input f, :user_id %>
        <%= hidden_input f, :workspace_id, value: @workspace.id %>
        <%= submit "Send Invite" %>
      <% end %>
    `
    // The name of the form is invite, which is automatically used as a prefix for the id of each input in the form
    template.querySelector('#invite_user_id').setAttribute('value', result.id)
    container.appendChild(template)
  }

  function renderSearchResult(container, result) {
    let template = document.createElement('div')
    template.innerHTML = `
      ${esc(result.username)}: ${esc(result.full_name)}
      <%= form_for Snickr.Platform.Channel.changeset(%Snickr.Platform.Channel{}, %{}), Routes.channel_path(@conn, :create, workspace_id: @workspace.id), [as: :channel], fn f -> %>
        <%= hidden_input f, :type, value: "direct" %>
        <%= hidden_input f, :to_user_id %>
        <%= hidden_input f, :workspace_id, value: @workspace.id %>
        <%= submit "Send Message" %>
      <% end %>
    `
    template.querySelector('#channel_to_user_id').setAttribute('value', result.id)
    container.appendChild(template)
  }
</script>
