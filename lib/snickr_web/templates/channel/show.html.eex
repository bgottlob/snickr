<%= content_tag :div, id: "channel-data", data: [id: @channel.id] do %>
<% end %>
<%= content_tag :div, id: "user-data", data: [id: @conn.assigns.current_user.id] do %>
<% end %>

<%= link "< Back", to: Routes.workspace_path(@conn, :show, @channel.workspace_id) %>

<%= if @channel.type == "direct" do %>
<h1><%= direct_recipient(@channel, @current_user) %></h1>
<% else %>
<h1><%= @channel.name %></h1>
<p><em>Description:</em> <%= @channel.description %></p>
<% end %>

<div style="overflow:auto; height:60vh" id="messages"></div>
<input id="chat-input" placeholder="Enter message" type="text">

  <h2>Search for Messages in <%= @channel.name %></h2>
  <div>
    <input id="message-search-term" placeholder="Search for message contents">
  </div>
  <ul id="message-search"></ul>

 <script>
  const CSRF_TOKEN = <%= raw Poison.encode!(Plug.CSRFProtection.get_csrf_token()) %>
  var messageTerm = document.querySelector('#message-search-term')
  var messageSearch = document.querySelector('#message-search')

  function renderMessageSearchResult(container, message) {
    let template = document.createElement('div')
    template.innerHTML = `
  <li style="list-style: none"><em style="font-size: 0.7em">${esc(new Date(message.inserted_at).toLocaleString())}</em><br><strong>${esc(message.sent_by_user.username)}:</strong> ${esc(message.content)}</li>
  `
    container.appendChild(template)
    container.scrollTop = container.scrollHeight
  }

  messageTerm.addEventListener('keyup', function(event) {
    // Clear the list of results
    messageSearch.innerHTML = ''
    
    if (event.currentTarget.value.length > 2) {
      messageSearch.innerHTML = 'LOADING...'
      var req2 = new XMLHttpRequest()
      req2.open("POST", "/messages/search", true)
      req2.setRequestHeader('Content-Type', 'application/json')
      req2.setRequestHeader('X-CSRF-Token', CSRF_TOKEN)
      req2.send(JSON.stringify({
        term: event.currentTarget.value,
        channel_id: Number(<%= @channel.id %>)
      }))

      req2.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            messageSearch.innerHTML = ''
            JSON.parse(this.responseText).forEach(function(result) {
              renderMessageSearchResult(messageSearch, result)
            })
          } else {
            messageSearch.innerHTML = 'FAILED'
          }
        }
      }
    }
  })

  // Escapes untrusted strings
  function esc(str) {
    let div = document.createElement('div')
    div.appendChild(document.createTextNode(str))
    return div.innerHTML
  }
 </script>

<%= if @channel.type != "direct" do %>
  <%= link "Unsubscribe", to: Routes.subscription_path(@conn, :delete, @current_user.id, @channel.id), method: :delete %>
  <h2>Invite Someone to <%= @channel.name %></h2>
  <div>
    <input id="invite-user" placeholder="Invite a user">
  </div>
  <ul id="invite-search"></ul>

 <script>
  const channelId = Number(<%= @channel.id %>)
  var inviteUser = document.querySelector('#invite-user')
  var inviteSearch = document.querySelector('#invite-search')

  inviteUser.addEventListener('keyup', function(event) {
    // Clear the list of results
    inviteSearch.innerHTML = ''
    
    if (event.currentTarget.value.length > 2) {
      inviteSearch.innerHTML = 'LOADING...'
      var req2 = new XMLHttpRequest()
      req2.open("POST", "/users/search", true)
      req2.setRequestHeader('Content-Type', 'application/json')
      req2.setRequestHeader('X-CSRF-Token', CSRF_TOKEN)
      req2.send(JSON.stringify({
        term: event.currentTarget.value,
        workspace_id: Number(<%= @channel.workspace_id %>)
      }))

      req2.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {
            inviteSearch.innerHTML = ''
            JSON.parse(this.responseText).forEach(function(result) {
              renderInviteSearchResult(inviteSearch, result)
            })
          } else {
            inviteSearch.innerHTML = 'FAILED'
          }
        }
      }
    }
  })

  // Escapes untrusted strings
  function esc(str) {
    let div = document.createElement('div')
    div.appendChild(document.createTextNode(str))
    return div.innerHTML
  }

  function renderInviteSearchResult(container, result) {
    let template = document.createElement('div')
    template.innerHTML = `
      ${esc(result.username)}: ${esc(result.full_name)}
      <%= form_for Snickr.Accounts.SubscriptionInvitation.changeset(%Snickr.Accounts.SubscriptionInvitation{}, %{}), Routes.invite_path(@conn, :create_subscription), [as: :invite], fn f -> %>
        <%= hidden_input f, :status, value: "pending" %>
        <%= hidden_input f, :user_id %>
        <%= hidden_input f, :channel_id, value: @channel.id %>
        <%= submit "Send Invite" %>
      <% end %>
    `
    template.querySelector('#invite_user_id').setAttribute('value', result.id)
    container.appendChild(template)
  }
 </script>
 <% end %>
